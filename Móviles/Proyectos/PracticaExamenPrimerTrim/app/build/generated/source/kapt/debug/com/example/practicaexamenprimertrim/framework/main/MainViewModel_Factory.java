// Generated by Dagger (https://dagger.dev).
package com.example.practicaexamenprimertrim.framework.main;

import com.example.rest_davidroldan.domain.usecases.DeleteCustomerUseCase;
import com.example.rest_davidroldan.domain.usecases.GetCustomersUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetCustomersUseCase> getCustomersUseCaseProvider;

  private final Provider<DeleteCustomerUseCase> deleteCustomerUseCaseProvider;

  public MainViewModel_Factory(Provider<GetCustomersUseCase> getCustomersUseCaseProvider,
      Provider<DeleteCustomerUseCase> deleteCustomerUseCaseProvider) {
    this.getCustomersUseCaseProvider = getCustomersUseCaseProvider;
    this.deleteCustomerUseCaseProvider = deleteCustomerUseCaseProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(getCustomersUseCaseProvider.get(), deleteCustomerUseCaseProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<GetCustomersUseCase> getCustomersUseCaseProvider,
      Provider<DeleteCustomerUseCase> deleteCustomerUseCaseProvider) {
    return new MainViewModel_Factory(getCustomersUseCaseProvider, deleteCustomerUseCaseProvider);
  }

  public static MainViewModel newInstance(GetCustomersUseCase getCustomersUseCase,
      DeleteCustomerUseCase deleteCustomerUseCase) {
    return new MainViewModel(getCustomersUseCase, deleteCustomerUseCase);
  }
}
