// Generated by Dagger (https://dagger.dev).
package com.example.rest_davidroldan.framework.neworder;

import com.example.rest_davidroldan.domain.usecases.AddOrderUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NewOrderViewModel_Factory implements Factory<NewOrderViewModel> {
  private final Provider<AddOrderUseCase> addOrderUseCaseProvider;

  public NewOrderViewModel_Factory(Provider<AddOrderUseCase> addOrderUseCaseProvider) {
    this.addOrderUseCaseProvider = addOrderUseCaseProvider;
  }

  @Override
  public NewOrderViewModel get() {
    return newInstance(addOrderUseCaseProvider.get());
  }

  public static NewOrderViewModel_Factory create(
      Provider<AddOrderUseCase> addOrderUseCaseProvider) {
    return new NewOrderViewModel_Factory(addOrderUseCaseProvider);
  }

  public static NewOrderViewModel newInstance(AddOrderUseCase addOrderUseCase) {
    return new NewOrderViewModel(addOrderUseCase);
  }
}
