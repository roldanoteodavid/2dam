// Generated by Dagger (https://dagger.dev).
package com.example.rest_davidroldan.data.sources.remote;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RemoteDataSource_Factory implements Factory<RemoteDataSource> {
  private final Provider<CustomerService> customerServiceProvider;

  private final Provider<OrderService> orderServiceProvider;

  public RemoteDataSource_Factory(Provider<CustomerService> customerServiceProvider,
      Provider<OrderService> orderServiceProvider) {
    this.customerServiceProvider = customerServiceProvider;
    this.orderServiceProvider = orderServiceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return newInstance(customerServiceProvider.get(), orderServiceProvider.get());
  }

  public static RemoteDataSource_Factory create(Provider<CustomerService> customerServiceProvider,
      Provider<OrderService> orderServiceProvider) {
    return new RemoteDataSource_Factory(customerServiceProvider, orderServiceProvider);
  }

  public static RemoteDataSource newInstance(CustomerService customerService,
      OrderService orderService) {
    return new RemoteDataSource(customerService, orderService);
  }
}
