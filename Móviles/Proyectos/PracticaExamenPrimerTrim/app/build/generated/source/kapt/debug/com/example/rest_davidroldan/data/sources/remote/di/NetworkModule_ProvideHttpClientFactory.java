// Generated by Dagger (https://dagger.dev).
package com.example.rest_davidroldan.data.sources.remote.di;

import com.example.rest_davidroldan.data.sources.remote.ServiceInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkModule_ProvideHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<ServiceInterceptor> serviceInterceptorProvider;

  public NetworkModule_ProvideHttpClientFactory(
      Provider<ServiceInterceptor> serviceInterceptorProvider) {
    this.serviceInterceptorProvider = serviceInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideHttpClient(serviceInterceptorProvider.get());
  }

  public static NetworkModule_ProvideHttpClientFactory create(
      Provider<ServiceInterceptor> serviceInterceptorProvider) {
    return new NetworkModule_ProvideHttpClientFactory(serviceInterceptorProvider);
  }

  public static OkHttpClient provideHttpClient(ServiceInterceptor serviceInterceptor) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideHttpClient(serviceInterceptor));
  }
}
